//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Quintity.TestFramework.Runtime.ListenersService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TestListenerDescriptor", Namespace="http://schemas.datacontract.org/2004/07/Quintity.TestFramework.Runtime")]
    [System.SerializableAttribute()]
    public partial class TestListenerDescriptor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Quintity.TestFramework.Core.Status StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Quintity.TestFramework.Core.OnFailure OnFailureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssemblyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> ParametersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public Quintity.TestFramework.Core.Status Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public Quintity.TestFramework.Core.OnFailure OnFailure {
            get {
                return this.OnFailureField;
            }
            set {
                if ((this.OnFailureField.Equals(value) != true)) {
                    this.OnFailureField = value;
                    this.RaisePropertyChanged("OnFailure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string Assembly {
            get {
                return this.AssemblyField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyField, value) != true)) {
                    this.AssemblyField = value;
                    this.RaisePropertyChanged("Assembly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public System.Collections.Generic.Dictionary<string, string> Parameters {
            get {
                return this.ParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersField, value) != true)) {
                    this.ParametersField = value;
                    this.RaisePropertyChanged("Parameters");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="TestParameters", Namespace="http://schemas.datacontract.org/2004/07/Quintity.TestFramework.Core", ItemName="TestParameter")]
    [System.SerializableAttribute()]
    public class TestParameters : System.Collections.Generic.List<Quintity.TestFramework.Core.TestParameter> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="TestChecks", Namespace="http://schemas.datacontract.org/2004/07/Quintity.TestFramework.Core", ItemName="TestCheck")]
    [System.SerializableAttribute()]
    public class TestChecks : System.Collections.Generic.List<Quintity.TestFramework.Core.TestCheck> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="TestWarnings", Namespace="http://schemas.datacontract.org/2004/07/Quintity.TestFramework.Core", ItemName="TestWarning")]
    [System.SerializableAttribute()]
    public class TestWarnings : System.Collections.Generic.List<Quintity.TestFramework.Core.TestWarning> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="TestData", Namespace="http://schemas.datacontract.org/2004/07/Quintity.TestFramework.Core", ItemName="TestName", KeyName="DataKey", ValueName="DataValue")]
    [System.SerializableAttribute()]
    public class TestData : System.Collections.Generic.Dictionary<string, object> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="TestScriptResults", Namespace="http://schemas.datacontract.org/2004/07/Quintity.TestFramework.Core", ItemName="TestScriptResult")]
    [System.SerializableAttribute()]
    public class TestScriptResults : System.Collections.Generic.List<Quintity.TestFramework.Core.TestScriptResult> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="TestPropertyCollection", Namespace="http://schemas.datacontract.org/2004/07/Quintity.TestFramework.Core", ItemName="TestProperty")]
    [System.SerializableAttribute()]
    public class TestPropertyCollection : System.Collections.Generic.List<Quintity.TestFramework.Core.TestProperty> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="TestScriptObjects", Namespace="http://schemas.datacontract.org/2004/07/Quintity.TestFramework.Core", ItemName="TestScriptObject")]
    [System.SerializableAttribute()]
    public class TestScriptObjects : System.Collections.Generic.List<Quintity.TestFramework.Core.TestScriptObject> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ListenersService.IListenerEvents", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IListenerEvents {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListenerEvents/ServiceAvailability", ReplyAction="http://tempuri.org/IListenerEvents/ServiceAvailabilityResponse")]
        bool ServiceAvailability();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListenerEvents/ServiceAvailability", ReplyAction="http://tempuri.org/IListenerEvents/ServiceAvailabilityResponse")]
        System.Threading.Tasks.Task<bool> ServiceAvailabilityAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListenerEvents/InitializeService", ReplyAction="http://tempuri.org/IListenerEvents/InitializeServiceResponse")]
        int InitializeService(System.Collections.Generic.List<Quintity.TestFramework.Runtime.ListenersService.TestListenerDescriptor> testListeners, Quintity.TestFramework.Core.TestProfile testProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListenerEvents/InitializeService", ReplyAction="http://tempuri.org/IListenerEvents/InitializeServiceResponse")]
        System.Threading.Tasks.Task<int> InitializeServiceAsync(System.Collections.Generic.List<Quintity.TestFramework.Runtime.ListenersService.TestListenerDescriptor> testListeners, Quintity.TestFramework.Core.TestProfile testProfile);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestExecutionBegin")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Quintity.TestFramework.Core.TestScriptObjectContainer))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Quintity.TestFramework.Core.TestSuite))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Quintity.TestFramework.Core.TestProcessor))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Quintity.TestFramework.Core.TestPostprocessor))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Quintity.TestFramework.Core.TestPreprocessor))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Quintity.TestFramework.Core.TestCase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Quintity.TestFramework.Core.TestStep))]
        void OnTestExecutionBegin(Quintity.TestFramework.Core.TestExecutionBeginArgs args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestExecutionBegin")]
        System.Threading.Tasks.Task OnTestExecutionBeginAsync(Quintity.TestFramework.Core.TestExecutionBeginArgs args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestExecutionComplete")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Quintity.TestFramework.Core.TestScriptObjectContainer))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Quintity.TestFramework.Core.TestSuite))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Quintity.TestFramework.Core.TestProcessor))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Quintity.TestFramework.Core.TestPostprocessor))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Quintity.TestFramework.Core.TestPreprocessor))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Quintity.TestFramework.Core.TestCase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Quintity.TestFramework.Core.TestStep))]
        void OnTestExecutionComplete(Quintity.TestFramework.Core.TestExecutionCompleteArgs args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestExecutionComplete")]
        System.Threading.Tasks.Task OnTestExecutionCompleteAsync(Quintity.TestFramework.Core.TestExecutionCompleteArgs args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestSuiteExecutionBegin")]
        void OnTestSuiteExecutionBegin(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestSuiteBeginExecutionArgs args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestSuiteExecutionBegin")]
        System.Threading.Tasks.Task OnTestSuiteExecutionBeginAsync(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestSuiteBeginExecutionArgs args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestPreprocessorBegin")]
        void OnTestPreprocessorBegin(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestProcessorBeginExecutionArgs args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestPreprocessorBegin")]
        System.Threading.Tasks.Task OnTestPreprocessorBeginAsync(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestProcessorBeginExecutionArgs args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestPreprocessorComplete")]
        void OnTestPreprocessorComplete(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestProcessorResult testProcessorResult);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestPreprocessorComplete")]
        System.Threading.Tasks.Task OnTestPreprocessorCompleteAsync(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestProcessorResult testProcessorResult);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestPostprocessorBegin")]
        void OnTestPostprocessorBegin(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestProcessorBeginExecutionArgs args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestPostprocessorBegin")]
        System.Threading.Tasks.Task OnTestPostprocessorBeginAsync(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestProcessorBeginExecutionArgs args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestPostprocessorComplete")]
        void OnTestPostprocessorComplete(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestProcessorResult testProcessorResult);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestPostprocessorComplete")]
        System.Threading.Tasks.Task OnTestPostprocessorCompleteAsync(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestProcessorResult testProcessorResult);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestSuiteExecutionComplete")]
        void OnTestSuiteExecutionComplete(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestSuiteResult testSuiteResult);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestSuiteExecutionComplete")]
        System.Threading.Tasks.Task OnTestSuiteExecutionCompleteAsync(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestSuiteResult testSuiteResult);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestCaseExecutionBegin")]
        void OnTestCaseExecutionBegin(Quintity.TestFramework.Core.TestCase testCase, Quintity.TestFramework.Core.TestCaseBeginExecutionArgs args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestCaseExecutionBegin")]
        System.Threading.Tasks.Task OnTestCaseExecutionBeginAsync(Quintity.TestFramework.Core.TestCase testCase, Quintity.TestFramework.Core.TestCaseBeginExecutionArgs args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestCaseExecutionComplete")]
        void OnTestCaseExecutionComplete(Quintity.TestFramework.Core.TestCase testCase, Quintity.TestFramework.Core.TestCaseResult testCaseResult);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestCaseExecutionComplete")]
        System.Threading.Tasks.Task OnTestCaseExecutionCompleteAsync(Quintity.TestFramework.Core.TestCase testCase, Quintity.TestFramework.Core.TestCaseResult testCaseResult);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestStepExecutionBegin")]
        void OnTestStepExecutionBegin(Quintity.TestFramework.Core.TestStep testStep, Quintity.TestFramework.Core.TestStepBeginExecutionArgs args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestStepExecutionBegin")]
        System.Threading.Tasks.Task OnTestStepExecutionBeginAsync(Quintity.TestFramework.Core.TestStep testStep, Quintity.TestFramework.Core.TestStepBeginExecutionArgs args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestStepExecutionComplete")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Quintity.TestFramework.Core.TestProcessorResult))]
        void OnTestStepExecutionComplete(Quintity.TestFramework.Core.TestStep testStep, Quintity.TestFramework.Core.TestStepResult testStepResult);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestStepExecutionComplete")]
        System.Threading.Tasks.Task OnTestStepExecutionCompleteAsync(Quintity.TestFramework.Core.TestStep testStep, Quintity.TestFramework.Core.TestStepResult testStepResult);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestCheck")]
        void OnTestCheck(Quintity.TestFramework.Core.TestCheck testCheck);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestCheck")]
        System.Threading.Tasks.Task OnTestCheckAsync(Quintity.TestFramework.Core.TestCheck testCheck);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestWarning")]
        void OnTestWarning(Quintity.TestFramework.Core.TestWarning testWarning);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestWarning")]
        System.Threading.Tasks.Task OnTestWarningAsync(Quintity.TestFramework.Core.TestWarning testWarning);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestTrace")]
        void OnTestTrace(string virtualUser, string traceMessage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestTrace")]
        System.Threading.Tasks.Task OnTestTraceAsync(string virtualUser, string traceMessage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestMetric")]
        void OnTestMetric(string virtualUser, Quintity.TestFramework.Core.TestMetricEventArgs args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IListenerEvents/OnTestMetric")]
        System.Threading.Tasks.Task OnTestMetricAsync(string virtualUser, Quintity.TestFramework.Core.TestMetricEventArgs args);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IListenerEventsChannel : Quintity.TestFramework.Runtime.ListenersService.IListenerEvents, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListenerEventsClient : System.ServiceModel.ClientBase<Quintity.TestFramework.Runtime.ListenersService.IListenerEvents>, Quintity.TestFramework.Runtime.ListenersService.IListenerEvents {
        
        public ListenerEventsClient() {
        }
        
        public ListenerEventsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ListenerEventsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ListenerEventsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ListenerEventsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ServiceAvailability() {
            return base.Channel.ServiceAvailability();
        }
        
        public System.Threading.Tasks.Task<bool> ServiceAvailabilityAsync() {
            return base.Channel.ServiceAvailabilityAsync();
        }
        
        public int InitializeService(System.Collections.Generic.List<Quintity.TestFramework.Runtime.ListenersService.TestListenerDescriptor> testListeners, Quintity.TestFramework.Core.TestProfile testProfile) {
            return base.Channel.InitializeService(testListeners, testProfile);
        }
        
        public System.Threading.Tasks.Task<int> InitializeServiceAsync(System.Collections.Generic.List<Quintity.TestFramework.Runtime.ListenersService.TestListenerDescriptor> testListeners, Quintity.TestFramework.Core.TestProfile testProfile) {
            return base.Channel.InitializeServiceAsync(testListeners, testProfile);
        }
        
        public void OnTestExecutionBegin(Quintity.TestFramework.Core.TestExecutionBeginArgs args) {
            base.Channel.OnTestExecutionBegin(args);
        }
        
        public System.Threading.Tasks.Task OnTestExecutionBeginAsync(Quintity.TestFramework.Core.TestExecutionBeginArgs args) {
            return base.Channel.OnTestExecutionBeginAsync(args);
        }
        
        public void OnTestExecutionComplete(Quintity.TestFramework.Core.TestExecutionCompleteArgs args) {
            base.Channel.OnTestExecutionComplete(args);
        }
        
        public System.Threading.Tasks.Task OnTestExecutionCompleteAsync(Quintity.TestFramework.Core.TestExecutionCompleteArgs args) {
            return base.Channel.OnTestExecutionCompleteAsync(args);
        }
        
        public void OnTestSuiteExecutionBegin(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestSuiteBeginExecutionArgs args) {
            base.Channel.OnTestSuiteExecutionBegin(testSuite, args);
        }
        
        public System.Threading.Tasks.Task OnTestSuiteExecutionBeginAsync(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestSuiteBeginExecutionArgs args) {
            return base.Channel.OnTestSuiteExecutionBeginAsync(testSuite, args);
        }
        
        public void OnTestPreprocessorBegin(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestProcessorBeginExecutionArgs args) {
            base.Channel.OnTestPreprocessorBegin(testSuite, args);
        }
        
        public System.Threading.Tasks.Task OnTestPreprocessorBeginAsync(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestProcessorBeginExecutionArgs args) {
            return base.Channel.OnTestPreprocessorBeginAsync(testSuite, args);
        }
        
        public void OnTestPreprocessorComplete(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestProcessorResult testProcessorResult) {
            base.Channel.OnTestPreprocessorComplete(testSuite, testProcessorResult);
        }
        
        public System.Threading.Tasks.Task OnTestPreprocessorCompleteAsync(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestProcessorResult testProcessorResult) {
            return base.Channel.OnTestPreprocessorCompleteAsync(testSuite, testProcessorResult);
        }
        
        public void OnTestPostprocessorBegin(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestProcessorBeginExecutionArgs args) {
            base.Channel.OnTestPostprocessorBegin(testSuite, args);
        }
        
        public System.Threading.Tasks.Task OnTestPostprocessorBeginAsync(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestProcessorBeginExecutionArgs args) {
            return base.Channel.OnTestPostprocessorBeginAsync(testSuite, args);
        }
        
        public void OnTestPostprocessorComplete(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestProcessorResult testProcessorResult) {
            base.Channel.OnTestPostprocessorComplete(testSuite, testProcessorResult);
        }
        
        public System.Threading.Tasks.Task OnTestPostprocessorCompleteAsync(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestProcessorResult testProcessorResult) {
            return base.Channel.OnTestPostprocessorCompleteAsync(testSuite, testProcessorResult);
        }
        
        public void OnTestSuiteExecutionComplete(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestSuiteResult testSuiteResult) {
            base.Channel.OnTestSuiteExecutionComplete(testSuite, testSuiteResult);
        }
        
        public System.Threading.Tasks.Task OnTestSuiteExecutionCompleteAsync(Quintity.TestFramework.Core.TestSuite testSuite, Quintity.TestFramework.Core.TestSuiteResult testSuiteResult) {
            return base.Channel.OnTestSuiteExecutionCompleteAsync(testSuite, testSuiteResult);
        }
        
        public void OnTestCaseExecutionBegin(Quintity.TestFramework.Core.TestCase testCase, Quintity.TestFramework.Core.TestCaseBeginExecutionArgs args) {
            base.Channel.OnTestCaseExecutionBegin(testCase, args);
        }
        
        public System.Threading.Tasks.Task OnTestCaseExecutionBeginAsync(Quintity.TestFramework.Core.TestCase testCase, Quintity.TestFramework.Core.TestCaseBeginExecutionArgs args) {
            return base.Channel.OnTestCaseExecutionBeginAsync(testCase, args);
        }
        
        public void OnTestCaseExecutionComplete(Quintity.TestFramework.Core.TestCase testCase, Quintity.TestFramework.Core.TestCaseResult testCaseResult) {
            base.Channel.OnTestCaseExecutionComplete(testCase, testCaseResult);
        }
        
        public System.Threading.Tasks.Task OnTestCaseExecutionCompleteAsync(Quintity.TestFramework.Core.TestCase testCase, Quintity.TestFramework.Core.TestCaseResult testCaseResult) {
            return base.Channel.OnTestCaseExecutionCompleteAsync(testCase, testCaseResult);
        }
        
        public void OnTestStepExecutionBegin(Quintity.TestFramework.Core.TestStep testStep, Quintity.TestFramework.Core.TestStepBeginExecutionArgs args) {
            base.Channel.OnTestStepExecutionBegin(testStep, args);
        }
        
        public System.Threading.Tasks.Task OnTestStepExecutionBeginAsync(Quintity.TestFramework.Core.TestStep testStep, Quintity.TestFramework.Core.TestStepBeginExecutionArgs args) {
            return base.Channel.OnTestStepExecutionBeginAsync(testStep, args);
        }
        
        public void OnTestStepExecutionComplete(Quintity.TestFramework.Core.TestStep testStep, Quintity.TestFramework.Core.TestStepResult testStepResult) {
            base.Channel.OnTestStepExecutionComplete(testStep, testStepResult);
        }
        
        public System.Threading.Tasks.Task OnTestStepExecutionCompleteAsync(Quintity.TestFramework.Core.TestStep testStep, Quintity.TestFramework.Core.TestStepResult testStepResult) {
            return base.Channel.OnTestStepExecutionCompleteAsync(testStep, testStepResult);
        }
        
        public void OnTestCheck(Quintity.TestFramework.Core.TestCheck testCheck) {
            base.Channel.OnTestCheck(testCheck);
        }
        
        public System.Threading.Tasks.Task OnTestCheckAsync(Quintity.TestFramework.Core.TestCheck testCheck) {
            return base.Channel.OnTestCheckAsync(testCheck);
        }
        
        public void OnTestWarning(Quintity.TestFramework.Core.TestWarning testWarning) {
            base.Channel.OnTestWarning(testWarning);
        }
        
        public System.Threading.Tasks.Task OnTestWarningAsync(Quintity.TestFramework.Core.TestWarning testWarning) {
            return base.Channel.OnTestWarningAsync(testWarning);
        }
        
        public void OnTestTrace(string virtualUser, string traceMessage) {
            base.Channel.OnTestTrace(virtualUser, traceMessage);
        }
        
        public System.Threading.Tasks.Task OnTestTraceAsync(string virtualUser, string traceMessage) {
            return base.Channel.OnTestTraceAsync(virtualUser, traceMessage);
        }
        
        public void OnTestMetric(string virtualUser, Quintity.TestFramework.Core.TestMetricEventArgs args) {
            base.Channel.OnTestMetric(virtualUser, args);
        }
        
        public System.Threading.Tasks.Task OnTestMetricAsync(string virtualUser, Quintity.TestFramework.Core.TestMetricEventArgs args) {
            return base.Channel.OnTestMetricAsync(virtualUser, args);
        }
    }
}
